https://github.com/macrozheng/mall 电商系统
多线程的实现方式有哪些？
描述一些线程死锁的情况？
线程池的原理是什么样子？底层方法的参数分别是什么意思？
那你知道他的参数都有哪些吗 ？都分别代表什么意思吗
几个参数的意思分别为：

corePoolSize：线程池里最小线程数
maximumPoolSize：线程池里最大线程数量，超过最大线程时候会使用 RejectedExecutionHandler
keepAliveTime：线程最大的存活时间，超过这个时间就会被回收
unit：线程最大的存活时间的单位
workQueue：缓存需要执行的异步任务的队列
threadFactory：新建线程工厂
handler：拒绝策略，表示当workQueue已满，且池中的线程数达到maximumPoolSize时，线程池拒绝添加新任务时采取的策略。DiscardPolicy：抛弃当前任务，DiscardOldestPolicy：扔掉最旧的，CallerRunsPolicy：由向线程池提交任务的线程来执行该任务，AbortPolicy：抛出 RejectedExecutionException 异常。

这几种线程池在哪些情况下使用什么类型的，以及要注意什么问题，很大可能面试官会继续深挖。

mybatis 的 $ 与 # 的区别？
$ 跟 # 的使用场景 ？
mybatis 的 dao 接口跟 xml 文件里面的sql 是如何建立关系的？

mysql 锁机制 ？行锁，表锁，页面锁
排它锁 & 共享锁你了解吗 ？
mysql 索引是怎么实现的？

缓存击穿、缓存穿透 、缓存雪崩 ？
热点数据失效怎么解决？
先删缓存还是先更新数据库，为什么？是先更新数据库

kafka 的架构，包含了哪些角色？
kafka 的最小工作单元？
kafka 消息重复消费的问题？幂等怎么做的？
kafka ack 机制？集群中的ack 是怎么实现的？

Redis 中有哪些数据结构

这里面试官问 你平常有没有看过一些源码？框架的也行？JDK 的也行。


优化现有MySQL数据库
1.数据库设计和表创建时就要考虑性能
  简言之就是使用合适的数据类型,选择合适的索引
  设计表时要注意的东西：表字段避免null值出现，null值很难查询优化且占用额外的索引空间；尽量使用INT而非BIGINT；使用枚举或整数代替字符串类型；单表不要有太多字段；
  索引：要根据查询有针对性的创建，考虑在WHERE和ORDERBY命令上涉及的列建立索引；应尽量避免在WHERE子句中对字段进行NULL值判断；字符字段只建前缀索引；字符字段最好不要做主键；不用外键，由程序保证约束；使用多列索引时主意顺序和查询条件保持一致，同时删除不必要的单列索引；
2.SQL的编写需要注意优化
  使用limit对查询结果的记录进行限定
  避免select *，将需要查找的字段列出来
  使用连接（join）来代替子查询
  拆分大的delete或insert语句
  可通过开启慢查询日志来找出较慢的SQL
  不做列运算：SELECT id WHERE age + 1 = 10，任何对列的操作都将导致表扫描，它包括数据库教程函数、计算表达式等等，查询时要尽可能将操作移至等号右边
  SQL语句尽可能简单：一条SQL只能在一个cpu运算；大语句拆小语句，减少锁时间；一条大SQL可以堵死整个库
  OR改写成IN：OR的效率是n级别，IN的效率是log(n)级别，in的个数建议控制在200以内
  不用函数和触发器，在应用程序实现
  避免%xxx式查询
  少用JOIN
  使用同类型进行比较，比如用'123'和'123'比，123和123比
  尽量避免在WHERE子句中使用!=或<>操作符，否则将引擎放弃使用索引而进行全表扫描
  对于连续数值，使用BETWEEN不用IN：SELECT id FROM t WHERE num BETWEEN 1 AND 5
  列表数据不要拿全表，要使用LIMIT来分页，每页数量也不要太大
3.分区
  MySQL在5.1版引入的分区是一种简单的水平拆分，用户需要在建表的时候加上分区参数，对应用是透明的无需修改代码
  MySQL实现分区的方式也意味着索引也是按照分区的子表定义，没有全局索引
  用户的SQL语句是需要针对分区表做优化，SQL条件中要带上分区条件的列，从而使查询定位到少量的分区上，否则就会扫描全部分区，可以通过EXPLAINPARTITIONS来查看某条SQL语句会落在那些分区上，从而进行SQL优化
  分区的好处：
	可以让单表存储更多的数据
	分区表的数据更容易维护，可以通过清楚整个分区批量删除大量数据，也可以增加新的分区来支持新插入的数据。另外，还可以对一个独立分区进行优化、检查、修复等操作
	部分查询能够从查询条件确定只落在少数分区上，速度会很快
	分区表的数据还可以分布在不同的物理设备上，从而搞笑利用多个硬件设备
	可以使用分区表赖避免某些特殊瓶颈，例如InnoDB单个索引的互斥访问、ext3文件系统的inode锁竞争
	可以备份和恢复单个分区
  分区的限制和缺点
	一个表最多只能有1024个分区
	如果分区字段中有主键或者唯一索引的列，那么所有主键列和唯一索引列都必须包含进来
	分区表无法使用外键约束
	NULL值会使分区过滤无效
	所有分区必须使用相同的存储引擎
4.分表
  分表分为垂直拆分和水平拆分，通常以某个字段做拆分项。
5.分库
  把一个数据库分成多个，建议做个读写分离就行了，真正的做分库也会带来大量的开发成本
	
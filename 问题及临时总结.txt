
小程序支付 https://www.jianshu.com/p/209b9dce0c8d
	https://cloud.tencent.com/edu/learning/

https://github.com/macrozheng/mall 电商系统
深度解密HTTP通信细节 https://mp.weixin.qq.com/s/qrP9obd92Z-LxcHJFzblNQ
把 Map 中的 hash() 分析的最透彻的文章 https://mp.weixin.qq.com/s/8p6pBqWGqxWNDUWUU6i4Ew
对象并不一定都是在堆上分配内存的。 https://mp.weixin.qq.com/s/UckjBBaurPIhSMSTMzWEkg
什么是时间复杂度？ https://mp.weixin.qq.com/s/MQrcKt3u1m5uMli08_q9DQ
漫画：什么是字典序算法？ https://mp.weixin.qq.com/s/lL6YNdkmJOZJ1431ivhxbg
深入 Redis HyperLogLog 内部数据结构分析 https://mp.weixin.qq.com/s/L_arTkWDcYFsirXB4eT9Rw
深入 Redis 字典遍历 https://mp.weixin.qq.com/s/qOOkQLD9nuuhGDUEUuw1IQ
搜索之路：Elasticsearch的诞生 https://mp.weixin.qq.com/s/9eAa3AuaLQAsKoccEmSgnQ
分布式多中心架构的几点看法 https://mp.weixin.qq.com/s/8pPIZ7Hj3pAvYY_MVuk3kA
浅析如何设计一个亿级网关 https://mp.weixin.qq.com/s/x_u8Nqw3KYK_Dts5rydB2w
分库分表技术演进&最佳实践-修订篇 https://mp.weixin.qq.com/s/gOUkKlTEkhKKTfZ-yZM78w
线上服务器内存分析及问题排查 https://mp.weixin.qq.com/s/oeWf1CeM4xcVzhYfcEl1Gg
黑客攻防日记 https://mp.weixin.qq.com/s/3ESte7nWLMKPe8QAfzWtlA
深入理解 RPC 消息协议设计 https://mp.weixin.qq.com/s/Ap2Ls6lbfUi_2m5Go5pFlA
分布式一致性算法：可能比你想象得更复杂 https://mp.weixin.qq.com/s/thLqnuvk7PST74yCRPcT7w
漫画：什么是蓝绿部署？ https://mp.weixin.qq.com/s/sdfl6mgHmnj82L8s_12bHQ
阅读源码的三种境界 https://mp.weixin.qq.com/s/jHlF6sZqG6Yhg006GfkgKw
HDFS的诞生 https://mp.weixin.qq.com/s/upUfceBRDXoCO0m4z_zW0A
漫画：“架构师”小赵的故事 https://mp.weixin.qq.com/s/Lr8MvTS0-WFPQ18AHSkw8A
漫画：什么是八皇后问题？ https://mp.weixin.qq.com/s/BsNaHudoL4gt00teTy7uRA
如何判断一个元素在亿级数据中是否存在？ https://mp.weixin.qq.com/s/Weh8YhWRpCChuA1wm5mDsA
不改一行代码定位线上性能问题 https://mp.weixin.qq.com/s/g8X94SJErDlTlhGQS31jtg
用户增长怎么做？我在Uber和摩拜的实战经验 https://mp.weixin.qq.com/s/mWXEAcpL4SxpABmvJXpVlg


为什么线程池的底层数据接口采用HashSet来实现
再有人问你synchronized是什么，就把这篇文章发给他。 https://mp.weixin.qq.com/s/GOwgJwcSBHGg5ZxY7cAXuQ
Java面试必问，ThreadLocal终极篇 https://mp.weixin.qq.com/s/_gQ0uJTTk4Ws8fDojK61og
加解密
微服务架构 https://mp.weixin.qq.com/s?__biz=MzI3NzE0NjcwMg==&mid=2650120438&idx=1&sn=24d92409f5f6e7062f5236d51d9bdf90&scene=21#wechat_redirect
关于分布式事务、两阶段提交协议、三阶提交协议 https://mp.weixin.qq.com/s?__biz=MzI3NzE0NjcwMg==&mid=402387528&idx=2&sn=f89ded5a927db3cdec0d006e1a261573&scene=21#wechat_redirect
Java ClassLoader，到了该彻底理解它的时候了 https://mp.weixin.qq.com/s/i3js0txy8VCu5Dr3diKW_g
并发数据结构的基石 https://mp.weixin.qq.com/s/Xx2FR-K0amZuHxDuHjt0sg
深(浅)入(出)剖析G1（Garbage First） https://mp.weixin.qq.com/s/9UpGG2uhuEoAqi5fy_ovCw
GOF 23种设计模式
Redis 深度历险：核心原理与应用实践  https://github.com/doocs/advanced-java
dump分析 JAVA CORE PostgreSql Docker ELK MQ SpringCloud Zookeeper
Redis懒惰删除的巨大牺牲 https://mp.weixin.qq.com/s/LevIAYMTsFYpuxCw_zeCDA
kafka为什么这么优秀(一) https://mp.weixin.qq.com/s/JPKYPazb6zJVwzVnncEdEg
kafka为什么这么优秀(二) https://mp.weixin.qq.com/s/jgd3e_XnMw2Aluj9olJIFQ
kafka如何保证消息不丢失
Sharding-JDBC
分库分表后如何部署上线 https://mp.weixin.qq.com/s/L_TvLNTaRPpXytlxAUlC9A
分布式系统所有问题解决思路概括
分布式一致性session
分布式锁
分布式事务
分库分表中间件及部署
分布式服务网关
这可能是把Docker的概念讲的最清楚的一篇文章 https://mp.weixin.qq.com/s/UZW5hRK0kF9hq0eeUw5ylA
Java开发必须掌握的日志分析命令 https://mp.weixin.qq.com/s/KrZ1rOVhjNkgQwz9fkdJwQ
阿里员工的Java问题排查工具单 https://mp.weixin.qq.com/s/Bpsz-9jvYl4PG8b6_TByDQ

管理经验
设计一个百万级的消息推送系统 https://mp.weixin.qq.com/s/lSBtKT6MgOHXivuJyRIH7Q

kafka集群
spring bean的生命周期






3）IO包和NIO包中的内容。
IO包和NIO包的内容相对来说不是很多，首先NIO模型要熟悉，特别是其中的selector一定要非常清楚它的职责和实现原理。其实NIO的核心是IO线程池，一定要记住这个关键点。有的时候，面试官可能也会问你IO包的设计模式（装饰器模式），为什么要这样设计？

有的面试官还会问你有没有更好的设计

4）Java的虚拟机的内容。这部分主要包括三部分，GC、类加载机制，以及内存。
一个GC部分简单的连环炮。
面试官可以先问你什么时候一个对象会被GC？
接着继续问你为什么要在这种时候对象才会被GC？
接着继续问你GC策略都有哪些分类？
你如果说出来了，继续问你这些策略分别都有什么优劣势？都适用于什么场景？
你继续说出来了以后，给你举个实际的场景，让你选择一个GC策略？
你如果选出来了，继续问你，为什么要选择这个策略？

下面是关于类加载机制的简单连环炮。
首先肯定是先问你Java的类加载器都有哪些？
回答了这些以后，可能会问你每个类加载器都加载哪些类？
说完以后，可能会问你这些类加载之间的父子关系是怎样的？
你在回答的时候可能会提到双亲委派模型，那么可以继续问你什么是双亲委派模型？
你解释完了以后，可能会继续问你，为什么Java的类加载器要使用双亲委派模型？
你回答完以后，可能会继续问你如何自定义自己的类加载器，自己的类加载器和Java自带的类加载器关系如何处理？

再来一个关于内存的连环炮。
首先肯定就是问你内存分为哪几部分，这些部分分别都存储哪些数据？
然后继续问你一个对象从创建到销毁都是怎么在这些部分里存活和转移的？
接着可能会问你，内存的哪些部分会参与GC的回收？
完事以后，可能还会问你Java的内存模型是怎么设计的？
你回答了以后，还会继续问你为什么要这么设计？
问完以后，还可能会让你结合内存模型的设计谈谈Volatile关键字的作用？
你在谈的时候，肯定会提到可见性，那么接着可见性这三个字，还可以继续问你并发的内容。

第二个阶段是讲述自己的项目，并在中间穿插着问题。
你需要做的，就是充分、再充分的去总结自己做过的项目（尤其是最近的一两个项目）

第三个阶段额外的加分项
1、计算机系统原理。
2、网络通信协议（TCP/IP，HTTP等）。
3、数据结构与算法。
4、著名开源项目的源码。
5、你自己有很棒的开源项目。
6、你的个人博客。

软素质：沟通表达，总结复盘，好奇心，自驱力，学习能力，技术规划

------------------------------------------
一、基础知识考核

Java 线程池的核心属性以及处理流程
Java 并发包原理、Synchronized 关键字、锁
线程的生命周期
JVM 类加载机制
JVM 内存模型
JVM 分代以及垃圾回收机制
Spring Bean 容器生命周期
Spring AOP 原理
Dubbo 请求流程以及原理
数据库 SQL 优化、数据库索引、索引原理

二、项目经验的考核
面试官首先会让你选择一个你最拿手的项目，画出架构图，之后的一切问题都从这个架构图触发。
项目中用到了 Kafka 这个框架，那么面试官就会问 Kafka 和 RocketMQ 之间的区别是什么
项目中还用到了 Canal 这个阿里巴巴开源的框架，那么面试官自然会问这个东西是干嘛的，原理是怎样的？
项目中还用到了 Zookeeper 作为协调者，那么 Zookeeper 在这个项目中的作用是什么，扮演了什么角色？

----------------------------------------------
面试官在一开始会让你进行自我介绍，主要是想让你介绍一下自己做过的一些项目，
你说这个项目中用到了netty，能大概讲讲netty的线程模型么？
那你在做这个项目时有没有遇到什么困难，或者是觉得有挑战的地方？
你们这个项目有给自己定指标么？

面试知识点



虚拟机JVM相关
有些面试官或许让你讲讲虚拟机的内存模型即可，有些也会让你解释垃圾回收的实现，当然也会有虚拟机调优的实战经验，线上问题排查等等。
Java虚拟机有了解么？
那你先讲讲它的内存模型吧
Java堆，Java栈，程序计数器，方法区，1.7的永久代，1.8的metaspace.
好，一般Java堆是如何实现的？
在HotSpot虚拟机实现中，Java堆分成了新生代和老年代，其中eden，from和to的内存大小默认是8:1:1（各种细节都要说出来...）
恩，给我讲讲对象在内存中的初始化过程？
千万不要只说，新对象在Java堆进行内存分配并初始化，或是在eden区进行内存分配并初始化）要初始化一个对象，首先要加载该对象所对应的class文件，该文件的数据会被加载到永久代，并创建一个底层的instanceKlass对象代表该class，再为将要初始化的对象分配内存空间，优先在线程私有内存空间中分配大小，如果空间不足，再到eden中进行内存分
恩，好，说下YGC的大概过程...
先找出根对象，如Java栈中引用的对象、静态变量引用的对象和系统词典中引用的对象等待，把这些对象标记成活跃对象，并复制到to区，接着遍历这些活跃对象中引用的对象并标记，找出老年代对象在eden区有引用关系的对象并标记，最后把这些标记的对象复制到to，在复制过程还要判断活跃对象的gc年龄是否已经达到阈值，如果已经达到阈值，就直接晋升到老年代，YGC结束之后把from和to的引用互换（能多说点就多说点，省的面试官再提问，我把老年代的cms回收也大致说了一遍，以为面试官会跳过这个话题了，还是太年轻了）。
你刚刚说到在YGC的时候，有些对象可能会发生晋升，如果晋升失败怎么处理？
我：....（断片了几秒钟，我记得我分析过这段代码的，但是印象不深刻了）我记得在标记阶段时，会把对象和对应的对象头数据保存在两个栈中，如果晋升失败的话，就把该对象的对象头复原...
面试官：那你在实际项目中有碰到这种情况么，会导致什么问题？
我：...（这我真没有遇到过）对，有遇到过一次，在分析gc日志的时候，发现YGC发生之后，日志显示gc后的内存变大了，后来查出来是因为对象的晋升失败造成的。（我隐约记得看过笨神的一篇文章，回答的心里很虚）
面试官：（没有反驳，继续问）有过虚拟机性能调优的经验么？
我：（说实话，调优经验真的不多）恩，有一点吧，不是很足，就是我们XX项目上线的时候，发现YGC特别的频繁^^&^8&，通过调整新生代的大小（线上环境的虚拟机参数是默认的），同时检查业务逻辑代码&*&$$~~！
面试官：恩？还有么？
我：（面试这么久，好怕面试官的下一句是 “恩？还有么？”，显然面试官还不满足我的回答，但是我也只能答到这个地步了...）恩，经验确实有限，目前就根据这个项目做过一些相关的优化。



Object.finalize()
面试官：和我讲讲Object类的finalize方法的实现原理
我：（完全没想到面试官会问这个）新建一个对象时，在JVM中会判断该对象对应的类是否重写了finalize方法，且finalize方法体不为空，则把该对象封装成Finalizer对象，并添加到Finalizer链表。
面试官：恩，然后呢？
我：Finalizer类中会初始化一个FinalizerThread类型的线程，负责从一个引用队列中获取Finalizer对象，并执行该Finalizer对象的runFinalizer方法，最终会执行原始对象的finalize方法，&&%%##（这块逻辑有点绕，当时答的也有点虚）
面试官：Finalizer对象什么时候会在引用队列中？
我：（努力回想中）在发生GC的时候，具体在什么时间点或如何被插入到引用队列中，这块实现我已经忘记了...（我真的忘记了，只记得这块逻辑太复杂了）
面试官：恩，你验证过finalize方法是否会执行么？
我：恩，自己写过例子证明过，也看过源码的实现。
面试官：怎么证明的？
我：初始化一个大数组，可以明显看出gc之后是否被回收，然后执行System.gc()，在finalize方法中输出信息 &&%%@@，（把之前做过的验证说一遍）

大问题
面试官：如果给你一个系统，如何去优化？
我：（优化什么？性能，稳定性，还是其它方面，只能硬着头皮上了，结合自己做的一个项目） 1、分析系统，定义指标 2、通过系统埋点，收集指标的度量值，对指标进行迭代优化&&^%&$#
面试官：就这些？没了么？
我：（因为是电话面试，感觉当时脑袋是空白的，估计和面试官的级别也有关系）如果指标是接口性能的话，可以看下系统内存是不是可以使用缓存进行性能上的优化，比如redis，如果是访问很频繁又不会经常变动的数据，如热点数据，可以直接使用本地缓存进行优化，毕竟一次网络请求也需要1~2毫秒
面试官：没了么？
我：（因为自己系统优化的经验确实不丰富，让面试官觉得怎么就只能想到如此少的优化点呢）数据库的读写分离，数据库的分库分表，如果经常条件查询数据库的话，可以引入搜索服务es或则lucene进行优化

----------------------------------------------
一面偏架构方面
1、介绍一下自己，讲讲项目经历
2、你们项目中微服务是怎么划分的，划分粒度怎么确定？
3、那在实践微服务架构中，有遇到什么问题么？
4、你们在关于微服务间数据一致性问题，是如何解决的？
5、你们为什么不用其他的MQ,最终选择了RokcetMQ？
6、为什么RocketMQ没有选择ZooKeeper，而是自己实现了一个NameServer集群？
7、嗯，理解的不错，Zookeeper在选举的过程中，还能对外提供服务么？
8、对Paxos算法了解多少？
9、如果让你来设计一个春晚抢红包架构，你会怎么设计？
10、有什么想问我的？

二面有点偏底层和算法
1、扯了下项目、讲一下项目经历
2、你们用了redis，redis的底层数据结构了解多少？
3、知道动态字符串sds的优缺点么？
注:sds为redis底层数据结构之一
4、redis的单线程特性有什么优缺点？
5、用过 Redis 的哪些数据结构, 分别用在什么场景?
6、你们怎么解决缓存击穿问题的？
注:估计答了Hytrix
7、Hytrix的隔离机制有哪些？Hytrix常见配置是哪些？
8、自己做过哪些调优？JVM调优、数据库调优都行！
9、给了个场景，问你怎么调

三面
1、讲讲自己基础掌握情况，以及项目经历
2、平时会用到哪些数据结构？
3、链表和数组的优缺点？
4、解决hash冲突的方法有哪些？

6、你刚才讲的是JDK1.7版本的实现，知道JDK1.8做了哪些改动么？
7、你们在微服务中用RPC通信还是REST？
8、RPC和HTTP的关系是什么？
9、知道HTTP1.0和1.1的区别么？
10、谈谈什么是HTTP的长连接和短连接？
11、TCP的三次握手和四次挥手，以及为什么要三次握手，而不是二次？
12、TCP 有哪些状态，相应状态的含义
13、让你评价一下你自己？

四面
1、依然是介绍自己
2、你们数据库的高可用架构是怎么样的？
3、如何保证数据库主从一致性？
4、知道mysql的索引算法么？
5、为什么mongodb的索引用了B树，而mysql用B+树？
6、用mysql过程中，有遇到什么问题么？
7、你们生产用的是哪种事务隔离级别，为什么？
8、谈一谈你对微服务架构的理解
9、你用过哪些RPC框架，讲讲他们优缺点
10、用过docker么，对容器了解多少
11、有什么问我的？

------------------------------------------



MyBatis 部分
5、mybatis 的 $ 与 # 的区别？
回答：他们两都可以来传递参数，不过 # 可以方式 sql 注入，而 $ 就是字符串拼接的方式处理，可能会有sql 注入的问题。
6、$ 跟 # 的使用场景 ？
这个问题我没有怎么理解得到，然后回答的就是 $ 在拼接表名的时候用，其他时候传递参数值的时候用 #。
7、mybatis 的 dao 接口跟 xml 文件里面的sql 是如何建立关系的？
这里问到的时候比较蒙圈，然后回答的是：mybatis 会先解析这些xml 文件，xml 文件里面有命名空间 （namespace），这里可以跟dao 建立关系，然后 xml 中的每段 sql 会有一个id 跟 dao 中的接口进行关联。。。
8、mysql 锁机制 ？
面试官问的是，你了解mysql 的锁机制么？我就只答出来一个行锁。然后其他的没想起，就认了，其他的忘记了。
建议你去了解了解还有表锁、页面锁 等等。
9、排它锁 & 共享锁你了解吗 ？
这个地方我想了一会，说平时了解得不多。实时上，平常我们的小业务系统基本上没有用到这些，可能有用到的地方，也没有去在意吧。
10、场景问题：在A线程处理一条数据，比如扣款，或者是更新状态时候，其他的线程比如 B 需要对它进行阻塞，不能够再对这条数据进行操作，包括查询也不行，得等A 线程处理完成以后，B才能进行处理。A 跟 B 是同样的业务代码产生的，非不同的业务。要使用数据库的锁来实现，怎么实现 ？
问这个问题的时候，面试官很耐心的解释了这个场景，然后问我有没有想起点什么来？其实就是想考察上面的关于数据库锁的问题。
11、mysql 索引是怎么实现的？
回答的是 B+ 树，接着面试官继续问：“能否大致描述一下 B+ 树的大致结构 ？”。这块内容没怎么了解，直接认怂了。
缓存相关
这块内容是我项目上写得有使用了多级缓存的方案，然后面试官就这一块问了下面的这些关于使用缓存可能会遇到的问题。
12、缓存击穿、缓存穿透 、缓存雪崩 ？
13、热点数据失效怎么解决？
这两个问题，以前好好了解过，但是没整理成自己的东西，面试的时候也说得云里雾里。
14、先删缓存还是先更新数据库，为什么？
这里我说的：是先删缓存，然后再更新数据库，但这是错误的，这里有非常大的问题。
想想这样一个场景：
如果一个线程 A 先把缓存删除了,然后去更新数据库，那么在它删了缓存还没有更新到数据库的这个中间时间，线程B进来了，发现缓存没有，就去读库，这时候还是读取还是旧的数据，然后又更新到缓存去了。此时A 才把新数据写到数据库。
此时就产生了一个典型的问题就是“双写不一致”。
15、kafka 的架构，包含了哪些角色？
这个问题我开始不知道怎么回答，就说了个 Broker，然后面试官提醒了一下：“不是我们平常还有生产者，消费呀什么的吗 ？”额，我说还有生产者、消费者、主题呀等等。
这过程中面试官还提到说平常我们在搭建的时候要配置写什么东西呀等等，按照官网的介绍说也行。
这里还有其他的比如Partition、消费者组、还有一个主要的 就是 zk 了。
这里建议大家好好的把 kafka 里面的这些概念、属于、架构图好好自己画一下。不然真是关键时候真说不出来，但是他一提你又明白。这样子肯定是不行的，面试是你说，不是面试官说。
16、kafka 的最小工作单元？
这个问题问得也是蒙圈，其实就是说我们在写代码的时候，要用kafka的时候。我们需要使用那些最基础的组件，比如生产者、消费者、主题、偏移量 等等。
这个问题如果你们遇到，最好向面试官问清楚。
17、kafka 消息重复消费的问题？幂等怎么做的？
刚开始面试官说，你知道kafka 消息重复的问题吗？有没遇到。
我回答的是，会存在消息重复消费的问题。我们在消费数据这端做了幂等处理来解决。
然后面试官继续才问的是：幂等怎么来做的， 我说通过设置数据版本号，还有数据库唯一索引等等。
面试官：“ok”。
这个问题，如果你能告诉面试官产生重复消费的情况，比如说投递的时候重复了，消费的时候由于 offset 没处理好等等问题导致的话，我想可能会更好。
18、kafka ack 机制？集群中的ack 是怎么实现的？
这里我只回答上了 ack 机制是啥，但是实现原理没有回答上来。
Redis
19、Redis 中有哪些数据结构
平常使用得最多的是 String , 还有 List 、Hash、Set、ZSet 。
没有再问其他的内容。
但是像Redis 为什么这么快这种问题，我认为你应该要去了解，其他小伙伴经常遇到。也就是多路复用是个什么玩意儿？
源码
20、这里面试官问 你平常有没有看过一些源码？框架的也行？JDK 的也行。

这过程中还问到了 怎么判断两个对象是否相等？也就是 == 和 equals 的知识点。
像数据库锁、线程池、缓存问题 这些内容几乎都是那种连环炮的形式，直到摸到你的底。

-------------------------------------------
什么情况会造成内存泄漏
在Java中，内存泄漏就是存在一些被分配的对象，这些对象有下面两个特点：
首先，这些对象是可达的，即在有向图中，存在通路可以与其相连；
其次，这些对象是无用的，即程序以后不会再使用这些对象。
如果对象满足这两个条件，这些对象就可以判定为Java中的内存泄漏，这些对象不会被GC所回收，然而它却占用内存。


红黑树是什么？怎么实现？时间复杂度 
红黑树(Red-Black Tree，简称R-B Tree)，它一种特殊的二叉查找树。红黑树是特殊的二叉查找树，意味着它满足二叉查找树的特征：任意一个节点所包含的键值，大于等于左孩子的键值，小于等于右孩子的键值。除了具备该特性之外，红黑树还包括许多额外的信息。
红黑树的每个节点上都有存储位表示节点的颜色，颜色是红(Red)或黑(Black)。红黑树的特性:
每个节点或者是黑色，或者是红色。
根节点是黑色。
每个叶子节点是黑色。
如果一个节点是红色的，则它的子节点必须是黑色的。
从一个节点到该节点的子孙节点的所有路径上包含相同数目的黑节点。
关于它的特性，需要注意的是：
第一，特性(3)中的叶子节点，是只为空(NIL或null)的节点。
第二，特性(5)，确保没有一条路径会比其他路径长出俩倍。因而，红黑树是相对是接近平衡的二叉树。
图=========
具体实现代码这里不贴了，要实现起来，需要包含的基本操作是添加、删除和旋转。在对红黑树进行添加或删除后，会用到旋转方法。旋转的目的是让树保持红黑树的特性。旋转包括两种：左旋 和 右旋。
红黑树的应用比较广泛，主要是用它来存储有序的数据，它的查找、插入和删除操作的时间复杂度是O(lgn)。

TCP三次握手 
第一次握手：建立连接时，客户端发送syn包（syn=j）到服务器，并进入SYN_SENT状态，等待服务器确认；SYN：同步序列编号（Synchronize Sequence Numbers）。
第二次握手：服务器收到syn包，必须确认客户的SYN（ack=j+1），同时自己也发送一个SYN包（syn=k），即SYN+ACK包，此时服务器进入SYN_RECV状态；
第三次握手：客户端收到服务器的SYN+ACK包，向服务器发送确认包ACK(ack=k+1），此包发送完毕，客户端和服务器进入ESTABLISHED（TCP连接成功）状态，完成三次握手。

十亿条淘宝购买记录，怎么获取出现最多的前十个 
这是一道典型的有限内存的海量数据处理的题目。一般这类题目的解答无非是以下几种：
分治，hash映射，堆排序，双层桶划分，Bloom Filter，bitmap，数据库索引，mapreduce等。

说一下Innodb和MySIAM的区别
MyISAM类型不支持事务处理等高级处理，而InnoDB类型支持。MyISAM类型的表强调的是性能，其执行数度比InnoDB类型更快，但是不提供事务支持，而InnoDB提供事务支持以及外部键等高级数据库功能。
InnoDB不支持FULLTEXT类型的索引
InnoDB 中不保存表的具体行数，也就是说，执行select count(*) from table时，InnoDB要扫描一遍整个表来计算有多少行，但是MyISAM只要简单的读出保存好的行数即可。注意的是，当count(*)语句包含 where条件时，两种表的操作是一样的。
对于AUTO_INCREMENT类型的字段，InnoDB中必须包含只有该字段的索引，但是在MyISAM表中，可以和其他字段一起建立联合索引。
DELETE FROM table时，InnoDB不会重新建立表，而是一行一行的删除。
LOAD TABLE FROM MASTER操作对InnoDB是不起作用的，解决方法是首先把InnoDB表改成MyISAM表，导入数据后再改成InnoDB表，但是对于使用的额外的InnoDB特性(例如外键)的表不适用。

说一下jvm内存模型，介绍一下你了解的垃圾收集器 
其实并没有jvm内存模型的概念。应该是Java内存模型或者jvm内存结构，这里面试者一定要听清楚问的是哪个，再回答。

其他问题
100个有序的整型，如何打乱顺序？
如何设计一个可靠的UDP协议？



说一下关系型数据库和非关系型数据库的区别 
非关系型数据库的优势：
性能：NOSQL是基于键值对的，可以想象成表中的主键和值的对应关系，而且不需要经过SQL层的解析，所以性能非常高
可扩展性：同样也是因为基于键值对，数据之间没有耦合性，所以非常容易水平扩展。
使用场景：日志、埋点、论坛、博客等

关系型数据库的优势：
复杂查询：可以用SQL语句方便的在一个表以及多个表之间做非常复杂的数据查询
事务支持:使得对于安全性能很高的数据访问要求得以实现。
使用场景：所有有逻辑关系的数据存储

如何访问链表中间节点
对于这个问题，我们首先能够想到的就是先遍历一遍整个的链表，然后计算出链表的长度，进而遍历第二遍找出中间位置的数据。这种方式非常简单。
若题目要求只能遍历一次链表，那又当如何解决问题？
可以采取建立两个指针，一个指针一次遍历两个节点，另一个节点一次遍历一个节点，当快指针遍历到空节点时，慢指针指向的位置为链表的中间位置，这种解决问题的方法称为快慢指针方法。
说下进程间通信，以及各自的区别
进程间通信是指在不同进程之间传播或交换信息。方式通常有管道（包括无名管道和命名管道）、消息队列、信号量、共享存储、Socket、Streams等。
访问淘宝网页的一个具体流程，从获取ip地址，到怎么返回相关内容
先通过DNS解析到服务器地址，然后反向代理、负载均衡服务器等，寻找集群中的一台机器来真正执行你的请求。还可以介绍CDN、页面缓存、Cookie以及session等。
这个过程还包括三次握手、HTTP request中包含哪些内容，状态码等，还有OSI七层分层可以介绍。
服务器接到请求后，会执行业务逻辑，执行过程中可以按照MVC来分别介绍。
服务处理过程中是否调用其他RPC服务或者异步消息，这个过程包含服务发现与注册，消息路由。
最后查询数据库，会不会经过缓存？是不是关系型数据库？是会分库分表还是做哪些操作？
对于数据库，分库分表如果数据量大的话是有必要的，一般业务根据一个分表字段进行取模进行分表，而在做数据库操作的时候，也根据同样的规则，决定数据的读写操作对应哪张表。这种也有开源的实现的，如阿里的TDDL就有这种功能。分库分表还涉及到很多技术，比如sequence如何设置 ，如何解决热点问题等。
最后再把处理结果封装成response，返回给客户端。浏览器再进行页面渲染。

------------------------------------------
我们将会从消息中间件、分布式缓存、分布式搜索、分布式架构、海量数据、NoSQL、高并发、高可用、高性能、数据库、JVM虚拟机等各方面聊一下面试中的高频技术问题。
举个例子，比如说看你简历上写了熟悉消息中间件（MQ技术）。那么可能我们就会有一个类似下面这样的连环炮式发问：
说说你们公司线上生产环境用的是什么消息中间件？
那你们线上系统是有哪些技术挑战，为什么必须要在系统里引入消息中间件？
你们的消息中间件技术选型为什么是RabbitMQ？
为什么不用RocketMQ或者是Kafka？技术选型的依据是什么？
你们怎么保证消息中间件的高可用性？避免消息中间件故障后引发系统整体故障？
使用消息中间件技术的时候，你们怎么保证投递出去的消息一定不会丢失？
你们怎么保证投递出去的消息只有一条且仅仅一条，不会出现重复的数据？
如果消费了重复的消息怎么保证数据的准确性？
你们线上业务用消息中间件的时候，是否需要保证消息的顺序性？
如果不需要保证消息顺序，为什么不需要？假如我有一个场景要保证消息的顺序，你们应该如何保证？
下游消费系统如果宕机了，导致几百万条消息在消息中间件里积压，此时怎么处理？
你们线上是否遇到过消息积压的生产故障？如果没遇到过，你考虑一下如何应对？
你们用的是RabbitMQ？那你说说RabbitMQ的底层架构原理，逻辑架构、物理架构以及数据持久化机制？
你们RabbitMQ的最高峰QPS每秒是多少？线上如何部署的，部署了多少台机器，机器的配置如何？
你们用的是Kafka？那你说说Kafka的底层架构原理，磁盘上数据如何存储的，整体分布式架构是如何实现的？
再说说Kafka是如何保证数据的高容错性的？零拷贝等技术是如何运用的？高吞吐量下如何优化生产者和消费者的性能？
看过Kafka的源码没有。如果看过，说说你对Kafka源码的理解？
你们用的是RocketMQ？RocketMQ很大的一个特点是对分布式事务的支持，你说说他在分布式事务支持这块机制的底层原理？
RocketMQ的源码看过么，聊聊你对RocketMQ源码的理解？
如果让你来动手实现一个分布式消息中间件，整体架构你会如何设计实现？

技术广度的考察
工程师首先要避免自己的技术短板，比如，我现在问你，你们公司有没有什么业务场景是可以用NoSQL的？现在国内各个公司用NoSQL的技术都有哪些选型？具体NoSQL可以解决什么问题？

底层技术的考察
Java虚拟机的核心原理、内存模型、垃圾回收、线上FullGC卡顿性能优化、线上OOM内存溢出问题你处理。
Java并发中的volatile、锁优化、AQS源码；
Netty背后的IO、网络相关的知识。
其实这种底层技术，是线上高负载大型系统的架构设计和开发，必须要具备的。
因为底层技术不扎实，很多中间件或其他高阶的技术，都无法深入理解其原理。

技术深度的考察
比如你项目里用了Redis或者是Elasticsearch。
只要你用过了，而且是你某个项目里的核心技术，那么一定会用连环炮式的发问，深入各种细节、底层、生产环境可能遇到的技术挑战。
是否对某个框架，或者是中间件深入的理解底层的源码实现，从源码级别说清楚他的架构原理？
是否对这个技术有过线上的高可用部署，承载过高并发流量的访问？
是否对这个技术在线上生产环境解决过各种各样的复杂技术挑战？
是否基于这个技术落地到你的业务系统中，设计出各种复杂的系统架构？

项目经验的考察
如果你说你们公司里用了dubbo作为服务框架，那么会问问你dubbo底层的通信框架是什么？Netty？Mina？
然后再问问你底层的NIO是啥？网络通信里的长连接和短连接是啥？
你是否看过dubbo的源码？dubbo源码中你印象深刻的对并发技术的运用是什么？

系统设计的考察
如何设计一个电商秒杀系统架构？
如何设计一个消息推送系统架构？
双11大促的时候如何设计系统的动态扩容/缩容的机制？

基本功的考察
尤其是数据结构和算法。

一面面试官可能主要就是考察一下技术内容，包括技术面以及连环炮发问考察技术深度，以及算法功底，不太涉及项目。
二面面试官可能会着重考察项目经验，系统设计，同时对技术深度也会继续考察。
三面面试官可能会从你把控过的项目规模、带的团队规模、团队管理能力、规范和流程设计能力、整体工作履历背景和经验、软素质（沟通表达、团队协作、价值观，等等）来考察你。

-----------------------------
 JAVA 的复习分为如下几个方向。
JVM；
排序算

存储相关：Redis 、Elastic Search、MySQL；
框架：Spring，SpringMVC，Spring Boot
分布式：Dubbo；
设计模式；

你可以看一下Collections 中的mergeSort和sort 方法，你会发现 mergeSort 就是归并排序的实现，而 sort 方法结合了归并排序和插入排序，这样使得 sort 方法最差O(NlogN)最好可以达到O(N)的效果。那么只有你自己理解了排序方法的实现，才能更好的使用 JAVA 中的集合类啊？
第二个“栗子”，大家都听闻过 TopN 问题吧，经常在面试中遇到请写一下 TopN 的实现，说到算法它就是一个大顶堆，说到 JAVA 它是一个 PriorityQueue 的实现，那么你理解了 TopN 问题，知道他的时间复杂度，优缺点了，那么是不是就可以熟练运用 JAVA 的工具类写更高效的程序了？

第一个“栗子”，使用 Redis 切不可只用他当做 key-value 缓存数据库。小编了解到它的5种基本类型中一种类型叫做 sorted set。sorted set 里 items 内容大于 64 的时候同时使用了 hash 和 skiplist 两种设计实现。这也会为了排序和查找性能做的优化。添加和删除都需要修改 skiplist，所以复杂度为 O(log(n))。 但是如果仅仅是查找元素的话可以直接使用 hash，其复杂度为 O(1) ，其他的 range 操作复杂度一般为 O(log(n))，当然如果是小于 64 的时候，因为是采用了 ziplist 的设计，其时间复杂度为 O(n)。这样以后查询和更新阅读都变得简单，那是不是可以用其实现 TopN 的需求呢？这样类似的需求就不需要你查数据，再在内存里面计算和操作了。比如我们简单的周排行，月排行都可以考虑使用这个数据结构实现，当然并不一定这是最好的解决方案，而是提供了一种解题思路。 

另一个“栗子”，PriorityQueue 是优先队列我们上文已经了解，那么 ElasticSearch 的 query 也是用的优先队列分别在每一个分片上面获取，然后再合并优先队列你了解吗？这个“栗子”告诉我们其实算法是想通的，你理解一个便可以举一反三触类旁通。

框架
一谈框架就想起来 Spring，一说 Spring 就想起来 IOC，AOP。因为大家都在用这个框架，所以对于框架也不需要看一些其他的，直接就深入了解一下 Spring 就可以了。通过上面的叙述你已经了解了小编的思路，看什么都要看他的实现原理，所以直接推荐你一本书《Spring 技术内幕》然后对着自己现有的 Spring 项目 Debug，从请求的流转梳理知识点。Spring 出来这么久大家对基本的知识已经了然于胸，重要的是看其解决问题的思路和原理，栗子又来了。  
比如需要实现在 Bean 刚刚初始化的时候做一些操作，是不是需要使用InitializingBean？那么具体怎么使用，它的原理是什么，Spring Bean 的生命周期是什么样子，通过具体的使用场景逐步展开说明。这样复习效果会更好一些，然后再逐步的思考每一个知识点里面涉及的更多的知识点，比如 AOP 里面的 Proxy 都是基于什么原理实现，有什么优缺点。

分布式
这是一个老生常谈的话题，也是这几年比较火的话题，说起分布式就一定和 Dubbo 有关系，但是不能仅仅就理解到 Dubbo。首先我们需要思考它解决的问题，为什么要引入 Dubbo 这个概念。随着业务的发展、用户量的增长，系统数量增多，调用依赖关系也变得复杂，为了确保系统高可用、高并发的要求，系统的架构也从单体时代慢慢迁移至服务SOA时代，应运而生的 Dubbo 出现了，它作为 RPC 的出现使得我们搭建微服务项目变得简单，但是我们不仅仅要思考 Dubbo带来的框架支撑。同时需要思考服务的幂等、分布式事务、服务之间的 Trace 定位、分布式日志、数据对账、重试机制等，与此同时考虑 MQ 对系统的解耦和压力的分担、数据库分布式部署和分库分表、限流、熔断等机制。所以最终总结是不仅仅要看 Dubbo 的使用、原理同时还要思考上下游和一些系统设计的问题，这块相对的知识点较多，可以针对上面抛出来的点各个击破。

设计模式
设计模式很多，但是常用的就几种，这个地方可以分两个地方准备。
1，学以致用，设计模式不是背出来的，而是用出来了。平时多注意思考当前项目的设计，是否可以套用设计模式，当然必须先理解每一个设计模式存在的意义。  
2，在现有框架中思考设计模式的体现，上面已经讲过框架怎么学习，用 Spring 距离，它里面一共用了9种设计模式，你都知道用到哪里了吗？如果不知道，试着把他们找出来，同时思考为什么这么设计，全部找到以后，基本的设计模式的用法和原理你也就都理解了

----------------------------------


JVM相关
JVM内存模型，GC机制和原理；
GC分哪两种，Minor GC 和Full GC有什么区别？什么时候会触发Full GC？分别采用什么算法？
JVM里的有几种classloader，为什么会有多种？
什么是双亲委派机制？介绍一些运作过程，双亲委派模型的好处；
什么情况下我们需要破坏双亲委派模型；
常见的JVM调优方法有哪些？可以具体到调整哪个参数，调成什么值？
JVM虚拟机内存划分、类加载器、垃圾收集算法、垃圾收集器、class文件结构是如何解析的；

Java扩展篇
红黑树的实现原理和应用场景；
NIO是什么？适用于何种场景？
Java9比Java8改进了什么；

说说反射的用途及实现，反射是不是很慢，我们在项目中是否要避免使用反射；
说说自定义注解的场景及实现；


Spring相关
Spring AOP的实现原理和场景？
Spring bean的作用域和生命周期；
Spring Boot比Spring做了哪些改进？ Spring 5比Spring4做了哪些改进；
如何自定义一个Spring Boot Starter？
Spring IOC是什么？优点是什么？
SpringMVC、动态代理、反射、AOP原理、事务隔离级别；

中间件篇
Dubbo完整的一次调用链路介绍；
dubbo的服务暴露过程
Dubbo Provider服务提供者要控制执行并发请求上限，具体怎么做？
Dubbo启动的时候支持几种配置方式？
了解几种消息中间件产品？各产品的优缺点介绍；
消息中间件如何保证消息的一致性和如何进行消息的重试机制？
Spring Cloud熔断机制介绍；
Spring Cloud对比下Dubbo，什么场景下该使用Spring Cloud？

数据库篇
锁机制介绍：行锁、表锁、排他锁、共享锁；
乐观锁的业务场景及实现方式；
事务介绍，分布式事物的理解，常见的解决方案有哪些，什么事两阶段提交、三阶段提交；
MySQL记录binlog的方式主要包括三种模式？每种模式的优缺点是什么？
MySQL锁，悲观锁、乐观锁、排它锁、共享锁、表级锁、行级锁；
分布式事务的原理2阶段提交，同步\异步\阻塞\非阻塞；
数据库事务隔离级别，MySQL默认的隔离级别、Spring如何实现事务、
JDBC如何实现事务、嵌套事务实现、分布式事务实现；
SQL的整个解析、执行过程原理、SQL行转列；

Redis
Redis为什么这么快？redis采用多线程会有哪些问题？
Redis支持哪几种数据结构；
Redis跳跃表的问题；
Redis单进程单线程的Redis如何能够高并发?
Redis如何使用Redis实现分布式锁？
Redis分布式锁操作的原子性，Redis内部是如何实现的？

其他
看过哪些源代码？然后会根据你说的源码问一些细节的问题？（这里主要考察面试者是否对技术有钻研的精神，还是只停留在表面，还是背了几道面经，这个对于很多有强迫症的面试官，如果你连源码都没看过，基本上是会pass掉的，比如我也是这样的！）
项目中遇到了哪些比较有挑战性的问题，是如何解决的；

------------------------------------

阿里参加的是远程视频面只有两轮面试+HR

一轮
自我介绍

针对学校做的项目，有没有考虑分布式存储；答：数据量不大，直接用数据库塞的下
那如果数据量很大，并且我要保证实时数据和历史数据有交集有历史沉淀，你会怎么设计?
了解分布式的计算框架吗? 答：了解基本原理但没有深入使用研究过，但如果需要使用我可以自学
那你平时都是怎么自学的？
有没有参与过一些开源项目？
如果用精通，熟练。。。来描述一下你的java水平你会用哪个词？


二轮


说一说NIO
接下来就是全程闲聊了，没有再问别的技术问题
还是有没有参加过开源项目
你平时怎么自学
最近在关注什么；答：最近在看区块链，又在看比特币源码
那你说说比特币有什么优点呢？ blabla….
说了那么多优点那他有缺点吗？ blabla….
在海外读的大学那你平时怎么利用英语的优势呢
闲暇有什么个人爱好
有什么想要问我的? (皮了一下，问了面试官您在阿里工作最大的收获是什么？)
请耐心等待下一轮面试。。。

HR面
自我介绍
为什么要跳槽
现在面了哪些公司
能不能来杭州
了解过互联网公司的文化吗
和传统IT比起来你觉得区别有哪些

------------------------------
星环科技
电面
主要是介绍自己做过的项目针对项目提了些问题

为什么想跳槽

一面
自我介绍
手写一个算法对一个数组的数组排序其中里面一层的数组里的元素是排好序的
一开始写了个归并，后面面试官说时间复杂度太高，不如直接n个指针指向每一个里层数组直接排序
面试官介绍公司状况，个人提了些问题

二面
两个链表判断是否相交，怎么找第一个相交点
一道sql，一个表有学生，科目(每个学生的科目说不一定相等)，分数三个字段，找所有科目大于90分的学生
开放题，服务器1上有40T的数据，服务器2上有一个任务需要这些数据，在网络带宽限制的情况下，怎么把数据快速传到服务器2上

三面
自我介绍

一道算法题，一个数组找连续子数组和为0的数组，并返回其中最大的长度
这道题一开始用了贪心，但说最坏情况下复杂度太高，后来经过面试官提醒实现了一个O(n)时间复杂度

----------------------------------

1.倒排索引
2.讲讲redis里面的哈希表？   
3.happen-before的规则？
4.volatile修饰符，synchronize锁 
5.java单例模式的实现，懒汉、饿汉？


8.快排时间空间复杂度，最好最坏的情况，优化方案？
9.TCP的拥塞控制，具体过程是怎么样的？UDP有拥塞控制吗？如何解决？
10.讲讲了解的垃圾回收算法和回收器，什么时候执行STOP THE WORLD？
11.了解Go语言吗？

六、头条三面（算法+场景题）
1.LRU算法实现（伪代码）
2.链表倒数第K个数（讲思路）
3.一堆螺丝和螺母用最短时间匹配（代码实现）
4.求每天浏览页面的新用户（Hive QL实现）
5.求抖音小视频每日点击量最高的10个（Hash + 最大堆）




美团超详细面经（附答案） https://mp.weixin.qq.com/s/055p6rutQd9zyyv_wG5jZg
最近面试java后端开发的感受  https://mp.weixin.qq.com/s/DReDw9hRVt1szb9CvmkiIw




基本操作执行次数  T（n）
渐进时间复杂度（asymptotic time complectiy） :若存在函数 f（n），使得当n趋近于无穷大时，T（n）/ f（n）的极限值为不等于零的常数，则称 f（n）是T（n）的同数量级函数。记作 T（n）= O（f（n）），称O（f（n）） 为算法的渐进时间复杂度，简称时间复杂度。
渐进时间复杂度用大写O来表示，所以也被称为大O表示法。


 




































leecode：代码性能查询


微服务 边界问题







































































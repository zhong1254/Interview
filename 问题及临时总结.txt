
小程序支付 https://www.jianshu.com/p/209b9dce0c8d
	https://cloud.tencent.com/edu/learning/

https://github.com/macrozheng/mall 电商系统
深度解密HTTP通信细节 https://mp.weixin.qq.com/s/qrP9obd92Z-LxcHJFzblNQ
把 Map 中的 hash() 分析的最透彻的文章 https://mp.weixin.qq.com/s/8p6pBqWGqxWNDUWUU6i4Ew
对象并不一定都是在堆上分配内存的。 https://mp.weixin.qq.com/s/UckjBBaurPIhSMSTMzWEkg
什么是时间复杂度？ https://mp.weixin.qq.com/s/MQrcKt3u1m5uMli08_q9DQ
漫画：什么是字典序算法？ https://mp.weixin.qq.com/s/lL6YNdkmJOZJ1431ivhxbg
深入 Redis HyperLogLog 内部数据结构分析 https://mp.weixin.qq.com/s/L_arTkWDcYFsirXB4eT9Rw
深入 Redis 字典遍历 https://mp.weixin.qq.com/s/qOOkQLD9nuuhGDUEUuw1IQ
搜索之路：Elasticsearch的诞生 https://mp.weixin.qq.com/s/9eAa3AuaLQAsKoccEmSgnQ
分布式多中心架构的几点看法 https://mp.weixin.qq.com/s/8pPIZ7Hj3pAvYY_MVuk3kA
浅析如何设计一个亿级网关 https://mp.weixin.qq.com/s/x_u8Nqw3KYK_Dts5rydB2w
分库分表技术演进&最佳实践-修订篇 https://mp.weixin.qq.com/s/gOUkKlTEkhKKTfZ-yZM78w
线上服务器内存分析及问题排查 https://mp.weixin.qq.com/s/oeWf1CeM4xcVzhYfcEl1Gg
黑客攻防日记 https://mp.weixin.qq.com/s/3ESte7nWLMKPe8QAfzWtlA
深入理解 RPC 消息协议设计 https://mp.weixin.qq.com/s/Ap2Ls6lbfUi_2m5Go5pFlA
分布式一致性算法：可能比你想象得更复杂 https://mp.weixin.qq.com/s/thLqnuvk7PST74yCRPcT7w
漫画：什么是蓝绿部署？ https://mp.weixin.qq.com/s/sdfl6mgHmnj82L8s_12bHQ
阅读源码的三种境界 https://mp.weixin.qq.com/s/jHlF6sZqG6Yhg006GfkgKw
HDFS的诞生 https://mp.weixin.qq.com/s/upUfceBRDXoCO0m4z_zW0A
漫画：“架构师”小赵的故事 https://mp.weixin.qq.com/s/Lr8MvTS0-WFPQ18AHSkw8A
漫画：什么是八皇后问题？ https://mp.weixin.qq.com/s/BsNaHudoL4gt00teTy7uRA
如何判断一个元素在亿级数据中是否存在？ https://mp.weixin.qq.com/s/Weh8YhWRpCChuA1wm5mDsA
不改一行代码定位线上性能问题 https://mp.weixin.qq.com/s/g8X94SJErDlTlhGQS31jtg
用户增长怎么做？我在Uber和摩拜的实战经验 https://mp.weixin.qq.com/s/mWXEAcpL4SxpABmvJXpVlg



加解密
微服务架构 https://mp.weixin.qq.com/s?__biz=MzI3NzE0NjcwMg==&mid=2650120438&idx=1&sn=24d92409f5f6e7062f5236d51d9bdf90&scene=21#wechat_redirect
关于分布式事务、两阶段提交协议、三阶提交协议 https://mp.weixin.qq.com/s?__biz=MzI3NzE0NjcwMg==&mid=402387528&idx=2&sn=f89ded5a927db3cdec0d006e1a261573&scene=21#wechat_redirect
Java ClassLoader，到了该彻底理解它的时候了 https://mp.weixin.qq.com/s/i3js0txy8VCu5Dr3diKW_g
并发数据结构的基石 https://mp.weixin.qq.com/s/Xx2FR-K0amZuHxDuHjt0sg
深(浅)入(出)剖析G1（Garbage First） https://mp.weixin.qq.com/s/9UpGG2uhuEoAqi5fy_ovCw

dump分析 JAVA CORE PostgreSql Docker ELK MQ SpringCloud 
Redis懒惰删除的巨大牺牲 https://mp.weixin.qq.com/s/LevIAYMTsFYpuxCw_zeCDA

Sharding-JDBC
分库分表后如何部署上线 https://mp.weixin.qq.com/s/L_TvLNTaRPpXytlxAUlC9A
分布式系统所有问题解决思路概括
分布式一致性session
分布式锁
分布式事务
分库分表中间件及部署
分布式服务网关
这可能是把Docker的概念讲的最清楚的一篇文章 https://mp.weixin.qq.com/s/UZW5hRK0kF9hq0eeUw5ylA
Java开发必须掌握的日志分析命令 https://mp.weixin.qq.com/s/KrZ1rOVhjNkgQwz9fkdJwQ
阿里员工的Java问题排查工具单 https://mp.weixin.qq.com/s/Bpsz-9jvYl4PG8b6_TByDQ

管理经验
设计一个百万级的消息推送系统 https://mp.weixin.qq.com/s/lSBtKT6MgOHXivuJyRIH7Q


spring bean的生命周期

3）IO包和NIO包中的内容。
IO包和NIO包的内容相对来说不是很多，首先NIO模型要熟悉，特别是其中的selector一定要非常清楚它的职责和实现原理。其实NIO的核心是IO线程池，一定要记住这个关键点。有的时候，面试官可能也会问你IO包的设计模式（装饰器模式），为什么要这样设计？

有的面试官还会问你有没有更好的设计

4）Java的虚拟机的内容。这部分主要包括三部分，GC、类加载机制，以及内存。
一个GC部分简单的连环炮。
面试官可以先问你什么时候一个对象会被GC？
接着继续问你为什么要在这种时候对象才会被GC？
接着继续问你GC策略都有哪些分类？
你如果说出来了，继续问你这些策略分别都有什么优劣势？都适用于什么场景？
你继续说出来了以后，给你举个实际的场景，让你选择一个GC策略？
你如果选出来了，继续问你，为什么要选择这个策略？

你需要做的，就是充分、再充分的去总结自己做过的项目（尤其是最近的一两个项目）

第三个阶段额外的加分项
1、计算机系统原理。
2、网络通信协议（TCP/IP，HTTP等）。
3、数据结构与算法。
4、著名开源项目的源码。
5、你自己有很棒的开源项目。
6、你的个人博客。

软素质：沟通表达，总结复盘，好奇心，自驱力，学习能力，技术规划

------------------------------------------
一、基础知识考核




Spring Bean 容器生命周期
Spring AOP 原理

数据库 SQL 优化、数据库索引、索引原理

二、项目经验的考核
面试官首先会让你选择一个你最拿手的项目，画出架构图，之后的一切问题都从这个架构图触发。

项目中还用到了 Canal 这个阿里巴巴开源的框架，那么面试官自然会问这个东西是干嘛的，原理是怎样的？


----------------------------------------------
面试官在一开始会让你进行自我介绍，主要是想让你介绍一下自己做过的一些项目，

那你在做这个项目时有没有遇到什么困难，或者是觉得有挑战的地方？
你们这个项目有给自己定指标么？

面试知识点

Object.finalize()
面试官：和我讲讲Object类的finalize方法的实现原理
我：（完全没想到面试官会问这个）新建一个对象时，在JVM中会判断该对象对应的类是否重写了finalize方法，且finalize方法体不为空，则把该对象封装成Finalizer对象，并添加到Finalizer链表。
面试官：恩，然后呢？
我：Finalizer类中会初始化一个FinalizerThread类型的线程，负责从一个引用队列中获取Finalizer对象，并执行该Finalizer对象的runFinalizer方法，最终会执行原始对象的finalize方法，&&%%##（这块逻辑有点绕，当时答的也有点虚）
面试官：Finalizer对象什么时候会在引用队列中？
我：（努力回想中）在发生GC的时候，具体在什么时间点或如何被插入到引用队列中，这块实现我已经忘记了...（我真的忘记了，只记得这块逻辑太复杂了）
面试官：恩，你验证过finalize方法是否会执行么？
我：恩，自己写过例子证明过，也看过源码的实现。
面试官：怎么证明的？
我：初始化一个大数组，可以明显看出gc之后是否被回收，然后执行System.gc()，在finalize方法中输出信息 &&%%@@，（把之前做过的验证说一遍）

大问题
面试官：如果给你一个系统，如何去优化？
我：（优化什么？性能，稳定性，还是其它方面，只能硬着头皮上了，结合自己做的一个项目） 1、分析系统，定义指标 2、通过系统埋点，收集指标的度量值，对指标进行迭代优化&&^%&$#
面试官：就这些？没了么？
我：（因为是电话面试，感觉当时脑袋是空白的，估计和面试官的级别也有关系）如果指标是接口性能的话，可以看下系统内存是不是可以使用缓存进行性能上的优化，比如redis，如果是访问很频繁又不会经常变动的数据，如热点数据，可以直接使用本地缓存进行优化，毕竟一次网络请求也需要1~2毫秒
面试官：没了么？
我：（因为自己系统优化的经验确实不丰富，让面试官觉得怎么就只能想到如此少的优化点呢）数据库的读写分离，数据库的分库分表，如果经常条件查询数据库的话，可以引入搜索服务es或则lucene进行优化

----------------------------------------------
一面偏架构方面
1、介绍一下自己，讲讲项目经历
2、你们项目中微服务是怎么划分的，划分粒度怎么确定？
3、那在实践微服务架构中，有遇到什么问题么？
4、你们在关于微服务间数据一致性问题，是如何解决的？

9、如果让你来设计一个春晚抢红包架构，你会怎么设计？
10、有什么想问我的？

二面有点偏底层和算法
1、扯了下项目、讲一下项目经历

三面
4、解决hash冲突的方法有哪些？

7、你们在微服务中用RPC通信还是REST？
8、RPC和HTTP的关系是什么？
9、知道HTTP1.0和1.1的区别么？
10、谈谈什么是HTTP的长连接和短连接？
11、TCP的三次握手和四次挥手，以及为什么要三次握手，而不是二次？
12、TCP 有哪些状态，相应状态的含义
13、让你评价一下你自己？

四面
1、依然是介绍自己
2、你们数据库的高可用架构是怎么样的？
3、如何保证数据库主从一致性？
4、知道mysql的索引算法么？
6、用mysql过程中，有遇到什么问题么？
7、你们生产用的是哪种事务隔离级别，为什么？
8、谈一谈你对微服务架构的理解
9、你用过哪些RPC框架，讲讲他们优缺点
10、用过docker么，对容器了解多少
11、有什么问我的？

------------------------------------------

MyBatis 部分
5、mybatis 的 $ 与 # 的区别？
回答：他们两都可以来传递参数，不过 # 可以方式 sql 注入，而 $ 就是字符串拼接的方式处理，可能会有sql 注入的问题。
6、$ 跟 # 的使用场景 ？
这个问题我没有怎么理解得到，然后回答的就是 $ 在拼接表名的时候用，其他时候传递参数值的时候用 #。
7、mybatis 的 dao 接口跟 xml 文件里面的sql 是如何建立关系的？
这里问到的时候比较蒙圈，然后回答的是：mybatis 会先解析这些xml 文件，xml 文件里面有命名空间 （namespace），这里可以跟dao 建立关系，然后 xml 中的每段 sql 会有一个id 跟 dao 中的接口进行关联。。。
8、mysql 锁机制 ？
面试官问的是，你了解mysql 的锁机制么？我就只答出来一个行锁。然后其他的没想起，就认了，其他的忘记了。
建议你去了解了解还有表锁、页面锁 等等。
9、排它锁 & 共享锁你了解吗 ？
这个地方我想了一会，说平时了解得不多。实时上，平常我们的小业务系统基本上没有用到这些，可能有用到的地方，也没有去在意吧。
10、场景问题：在A线程处理一条数据，比如扣款，或者是更新状态时候，其他的线程比如 B 需要对它进行阻塞，不能够再对这条数据进行操作，包括查询也不行，得等A 线程处理完成以后，B才能进行处理。A 跟 B 是同样的业务代码产生的，非不同的业务。要使用数据库的锁来实现，怎么实现 ？
问这个问题的时候，面试官很耐心的解释了这个场景，然后问我有没有想起点什么来？其实就是想考察上面的关于数据库锁的问题。
11、mysql 索引是怎么实现的？
回答的是 B+ 树，接着面试官继续问：“能否大致描述一下 B+ 树的大致结构 ？”。这块内容没怎么了解，直接认怂了。
缓存相关
这块内容是我项目上写得有使用了多级缓存的方案，然后面试官就这一块问了下面的这些关于使用缓存可能会遇到的问题。
12、缓存击穿、缓存穿透 、缓存雪崩 ？
13、热点数据失效怎么解决？
这两个问题，以前好好了解过，但是没整理成自己的东西，面试的时候也说得云里雾里。
14、先删缓存还是先更新数据库，为什么？
这里我说的：是先删缓存，然后再更新数据库，但这是错误的，这里有非常大的问题。
想想这样一个场景：
如果一个线程 A 先把缓存删除了,然后去更新数据库，那么在它删了缓存还没有更新到数据库的这个中间时间，线程B进来了，发现缓存没有，就去读库，这时候还是读取还是旧的数据，然后又更新到缓存去了。此时A 才把新数据写到数据库。
此时就产生了一个典型的问题就是“双写不一致”。


20、这里面试官问 你平常有没有看过一些源码？框架的也行？JDK 的也行。

这过程中还问到了 怎么判断两个对象是否相等？也就是 == 和 equals 的知识点。
像数据库锁、线程池、缓存问题 这些内容几乎都是那种连环炮的形式，直到摸到你的底。

-------------------------------------------

十亿条淘宝购买记录，怎么获取出现最多的前十个 
这是一道典型的有限内存的海量数据处理的题目。一般这类题目的解答无非是以下几种：
分治，hash映射，堆排序，双层桶划分，Bloom Filter，bitmap，数据库索引，mapreduce等。

说一下Innodb和MySIAM的区别
MyISAM类型不支持事务处理等高级处理，而InnoDB类型支持。MyISAM类型的表强调的是性能，其执行数度比InnoDB类型更快，但是不提供事务支持，而InnoDB提供事务支持以及外部键等高级数据库功能。
InnoDB不支持FULLTEXT类型的索引
InnoDB 中不保存表的具体行数，也就是说，执行select count(*) from table时，InnoDB要扫描一遍整个表来计算有多少行，但是MyISAM只要简单的读出保存好的行数即可。注意的是，当count(*)语句包含 where条件时，两种表的操作是一样的。
对于AUTO_INCREMENT类型的字段，InnoDB中必须包含只有该字段的索引，但是在MyISAM表中，可以和其他字段一起建立联合索引。
DELETE FROM table时，InnoDB不会重新建立表，而是一行一行的删除。
LOAD TABLE FROM MASTER操作对InnoDB是不起作用的，解决方法是首先把InnoDB表改成MyISAM表，导入数据后再改成InnoDB表，但是对于使用的额外的InnoDB特性(例如外键)的表不适用。


其他问题
100个有序的整型，如何打乱顺序？
如何设计一个可靠的UDP协议？

说一下关系型数据库和非关系型数据库的区别 
非关系型数据库的优势：
性能：NOSQL是基于键值对的，可以想象成表中的主键和值的对应关系，而且不需要经过SQL层的解析，所以性能非常高
可扩展性：同样也是因为基于键值对，数据之间没有耦合性，所以非常容易水平扩展。
使用场景：日志、埋点、论坛、博客等

关系型数据库的优势：
复杂查询：可以用SQL语句方便的在一个表以及多个表之间做非常复杂的数据查询
事务支持:使得对于安全性能很高的数据访问要求得以实现。
使用场景：所有有逻辑关系的数据存储

我们将会从消息中间件、分布式缓存、分布式搜索、分布式架构、海量数据、NoSQL、高并发、高可用、高性能、数据库、JVM虚拟机等各方面聊一下面试中的高频技术问题。

底层技术的考察
Java虚拟机的核心原理、内存模型、垃圾回收、线上FullGC卡顿性能优化、线上OOM内存溢出问题你处理。
Java并发中的volatile、锁优化、AQS源码；

其实这种底层技术，是线上高负载大型系统的架构设计和开发，必须要具备的。
因为底层技术不扎实，很多中间件或其他高阶的技术，都无法深入理解其原理。

技术深度的考察
比如你项目里用了Redis或者是Elasticsearch。
只要你用过了，而且是你某个项目里的核心技术，那么一定会用连环炮式的发问，深入各种细节、底层、生产环境可能遇到的技术挑战。
是否对某个框架，或者是中间件深入的理解底层的源码实现，从源码级别说清楚他的架构原理？
是否对这个技术有过线上的高可用部署，承载过高并发流量的访问？
是否对这个技术在线上生产环境解决过各种各样的复杂技术挑战？
是否基于这个技术落地到你的业务系统中，设计出各种复杂的系统架构？


系统设计的考察
如何设计一个电商秒杀系统架构？
如何设计一个消息推送系统架构？
双11大促的时候如何设计系统的动态扩容/缩容的机制？

基本功的考察
尤其是数据结构和算法。

一面面试官可能主要就是考察一下技术内容，包括技术面以及连环炮发问考察技术深度，以及算法功底，不太涉及项目。
二面面试官可能会着重考察项目经验，系统设计，同时对技术深度也会继续考察。
三面面试官可能会从你把控过的项目规模、带的团队规模、团队管理能力、规范和流程设计能力、整体工作履历背景和经验、软素质（沟通表达、团队协作、价值观，等等）来考察你。

-----------------------------
 JAVA 的复习分为如下几个方向。
排序算

存储相关：Elastic Search、MySQL；
框架：Spring，SpringMVC，Spring Boot

你可以看一下Collections 中的mergeSort和sort 方法，你会发现 mergeSort 就是归并排序的实现，而 sort 方法结合了归并排序和插入排序，这样使得 sort 方法最差O(NlogN)最好可以达到O(N)的效果。那么只有你自己理解了排序方法的实现，才能更好的使用 JAVA 中的集合类啊？
第二个“栗子”，大家都听闻过 TopN 问题吧，经常在面试中遇到请写一下 TopN 的实现，说到算法它就是一个大顶堆，说到 JAVA 它是一个 PriorityQueue 的实现，那么你理解了 TopN 问题，知道他的时间复杂度，优缺点了，那么是不是就可以熟练运用 JAVA 的工具类写更高效的程序了？



另一个“栗子”，PriorityQueue 是优先队列我们上文已经了解，那么 ElasticSearch 的 query 也是用的优先队列分别在每一个分片上面获取，然后再合并优先队列你了解吗？这个“栗子”告诉我们其实算法是想通的，你理解一个便可以举一反三触类旁通。

框架
一谈框架就想起来 Spring，一说 Spring 就想起来 IOC，AOP。因为大家都在用这个框架，所以对于框架也不需要看一些其他的，直接就深入了解一下 Spring 就可以了。通过上面的叙述你已经了解了小编的思路，看什么都要看他的实现原理，所以直接推荐你一本书《Spring 技术内幕》然后对着自己现有的 Spring 项目 Debug，从请求的流转梳理知识点。Spring 出来这么久大家对基本的知识已经了然于胸，重要的是看其解决问题的思路和原理，栗子又来了。  
比如需要实现在 Bean 刚刚初始化的时候做一些操作，是不是需要使用InitializingBean？那么具体怎么使用，它的原理是什么，Spring Bean 的生命周期是什么样子，通过具体的使用场景逐步展开说明。这样复习效果会更好一些，然后再逐步的思考每一个知识点里面涉及的更多的知识点，比如 AOP 里面的 Proxy 都是基于什么原理实现，有什么优缺点。

Java扩展篇

NIO是什么？适用于何种场景？

说说反射的用途及实现，反射是不是很慢，我们在项目中是否要避免使用反射；
说说自定义注解的场景及实现；

Spring相关
Spring AOP的实现原理和场景？
Spring bean的作用域和生命周期；
Spring Boot比Spring做了哪些改进？ Spring 5比Spring4做了哪些改进；
如何自定义一个Spring Boot Starter？
Spring IOC是什么？优点是什么？
SpringMVC、动态代理、反射、AOP原理、事务隔离级别；

中间件篇

了解几种消息中间件产品？各产品的优缺点介绍；
消息中间件如何保证消息的一致性和如何进行消息的重试机制？
Spring Cloud熔断机制介绍；

数据库篇
锁机制介绍：行锁、表锁、排他锁、共享锁；
乐观锁的业务场景及实现方式；
事务介绍，分布式事物的理解，常见的解决方案有哪些，什么事两阶段提交、三阶段提交；
MySQL记录binlog的方式主要包括三种模式？每种模式的优缺点是什么？
MySQL锁，悲观锁、乐观锁、排它锁、共享锁、表级锁、行级锁；
分布式事务的原理2阶段提交，同步\异步\阻塞\非阻塞；
数据库事务隔离级别，MySQL默认的隔离级别、Spring如何实现事务、
JDBC如何实现事务、嵌套事务实现、分布式事务实现；
SQL的整个解析、执行过程原理、SQL行转列；


其他
看过哪些源代码？然后会根据你说的源码问一些细节的问题？（这里主要考察面试者是否对技术有钻研的精神，还是只停留在表面，还是背了几道面经，这个对于很多有强迫症的面试官，如果你连源码都没看过，基本上是会pass掉的，比如我也是这样的！）
项目中遇到了哪些比较有挑战性的问题，是如何解决的；

------------------------------------

星环科技
电面
主要是介绍自己做过的项目针对项目提了些问题

为什么想跳槽

一面
自我介绍
手写一个算法对一个数组的数组排序其中里面一层的数组里的元素是排好序的
一开始写了个归并，后面面试官说时间复杂度太高，不如直接n个指针指向每一个里层数组直接排序
面试官介绍公司状况，个人提了些问题

二面
两个链表判断是否相交，怎么找第一个相交点
一道sql，一个表有学生，科目(每个学生的科目说不一定相等)，分数三个字段，找所有科目大于90分的学生
开放题，服务器1上有40T的数据，服务器2上有一个任务需要这些数据，在网络带宽限制的情况下，怎么把数据快速传到服务器2上

一道算法题，一个数组找连续子数组和为0的数组，并返回其中最大的长度
这道题一开始用了贪心，但说最坏情况下复杂度太高，后来经过面试官提醒实现了一个O(n)时间复杂度

1.倒排索引
  


8.快排时间空间复杂度，最好最坏的情况，优化方案？
9.TCP的拥塞控制，具体过程是怎么样的？UDP有拥塞控制吗？如何解决？
10.讲讲了解的垃圾回收算法和回收器，什么时候执行STOP THE WORLD？
11.了解Go语言吗？

六、头条三面（算法+场景题）
1.LRU算法实现（伪代码）
2.链表倒数第K个数（讲思路）
3.一堆螺丝和螺母用最短时间匹配（代码实现）
5.求抖音小视频每日点击量最高的10个（Hash + 最大堆）

美团超详细面经（附答案） https://mp.weixin.qq.com/s/055p6rutQd9zyyv_wG5jZg
最近面试java后端开发的感受  https://mp.weixin.qq.com/s/DReDw9hRVt1szb9CvmkiIw

基本操作执行次数  T（n）
渐进时间复杂度（asymptotic time complectiy） :若存在函数 f（n），使得当n趋近于无穷大时，T（n）/ f（n）的极限值为不等于零的常数，则称 f（n）是T（n）的同数量级函数。记作 T（n）= O（f（n）），称O（f（n）） 为算法的渐进时间复杂度，简称时间复杂度。
渐进时间复杂度用大写O来表示，所以也被称为大O表示法。
















